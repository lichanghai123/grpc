// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: an-ethernet-kpi.proto

package com.telemetry;

public final class AnEthernetKpi {
  private AnEthernetKpi() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface EthernetPortKpiRecordsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:an_ethernet_kpi.EthernetPortKpiRecords)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
     */
    java.util.List<com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord> 
        getEthernetPortKpiRecordList();
    /**
     * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
     */
    com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord getEthernetPortKpiRecord(int index);
    /**
     * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
     */
    int getEthernetPortKpiRecordCount();
    /**
     * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
     */
    java.util.List<? extends com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecordOrBuilder> 
        getEthernetPortKpiRecordOrBuilderList();
    /**
     * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
     */
    com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecordOrBuilder getEthernetPortKpiRecordOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code an_ethernet_kpi.EthernetPortKpiRecords}
   */
  public  static final class EthernetPortKpiRecords extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:an_ethernet_kpi.EthernetPortKpiRecords)
      EthernetPortKpiRecordsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EthernetPortKpiRecords.newBuilder() to construct.
    private EthernetPortKpiRecords(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EthernetPortKpiRecords() {
      ethernetPortKpiRecord_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EthernetPortKpiRecords();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EthernetPortKpiRecords(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                ethernetPortKpiRecord_ = new java.util.ArrayList<com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord>();
                mutable_bitField0_ |= 0x00000001;
              }
              ethernetPortKpiRecord_.add(
                  input.readMessage(com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          ethernetPortKpiRecord_ = java.util.Collections.unmodifiableList(ethernetPortKpiRecord_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.telemetry.AnEthernetKpi.internal_static_an_ethernet_kpi_EthernetPortKpiRecords_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.telemetry.AnEthernetKpi.internal_static_an_ethernet_kpi_EthernetPortKpiRecords_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.class, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.Builder.class);
    }

    public interface EthernetPortKpiRecordOrBuilder extends
        // @@protoc_insertion_point(interface_extends:an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       *ethernetCsmacd.f.s.p
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The name.
       */
      java.lang.String getName();
      /**
       * <pre>
       *ethernetCsmacd.f.s.p
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <pre>
       *以太接口发送的字节数
       * </pre>
       *
       * <code>uint64 port_tx_bytes = 2;</code>
       * @return The portTxBytes.
       */
      long getPortTxBytes();

      /**
       * <pre>
       *以太接口接收的字节数
       * </pre>
       *
       * <code>uint64 port_rx_bytes = 3;</code>
       * @return The portRxBytes.
       */
      long getPortRxBytes();

      /**
       * <pre>
       *以太接口发送的帧数
       * </pre>
       *
       * <code>uint64 port_tx_packets = 4;</code>
       * @return The portTxPackets.
       */
      long getPortTxPackets();

      /**
       * <pre>
       *以太接口接收的帧数
       * </pre>
       *
       * <code>uint64 port_rx_packets = 5;</code>
       * @return The portRxPackets.
       */
      long getPortRxPackets();

      /**
       * <pre>
       *以太接口发送方向丢弃的帧数，指由于MAC处理过程中各种原因导致丢弃的正确的数据帧，包括但不限于FIFO满而导致的丢包。（CRC错误、jabber、fragment均不统计）
       * </pre>
       *
       * <code>uint64 port_tx_discard_packets = 6;</code>
       * @return The portTxDiscardPackets.
       */
      long getPortTxDiscardPackets();

      /**
       * <pre>
       *以太接口接收方向丢弃的帧数，指由于MAC处理过程中各种原因导致丢弃的正确的数据帧，包括但不限于FIFO满而导致的丢包。（CRC错误、jabber、fragment均不统计）
       * </pre>
       *
       * <code>uint64 port_rx_discard_packets = 7;</code>
       * @return The portRxDiscardPackets.
       */
      long getPortRxDiscardPackets();

      /**
       * <pre>
       *以太接口接收的对齐错误的帧数
       * </pre>
       *
       * <code>uint64 port_rx_alignment_error_packets = 8;</code>
       * @return The portRxAlignmentErrorPackets.
       */
      long getPortRxAlignmentErrorPackets();

      /**
       * <pre>
       *以太接口发送方向的CRC错误帧数
       * </pre>
       *
       * <code>uint64 port_tx_crc_error_packets = 9;</code>
       * @return The portTxCrcErrorPackets.
       */
      long getPortTxCrcErrorPackets();

      /**
       * <pre>
       *以太接口接收方向的CRC错误帧数
       * </pre>
       *
       * <code>uint64 port_rx_crc_error_packets = 10;</code>
       * @return The portRxCrcErrorPackets.
       */
      long getPortRxCrcErrorPackets();

      /**
       * <pre>
       *以太接口发送的超长帧数
       * </pre>
       *
       * <code>uint64 port_tx_oversized_packets = 11;</code>
       * @return The portTxOversizedPackets.
       */
      long getPortTxOversizedPackets();

      /**
       * <pre>
       *以太接口接收的超长帧数
       * </pre>
       *
       * <code>uint64 port_rx_oversized_packets = 12;</code>
       * @return The portRxOversizedPackets.
       */
      long getPortRxOversizedPackets();

      /**
       * <pre>
       *以太接口发送的超短帧数  （帧长小于64并且CRC正确的包数)
       * </pre>
       *
       * <code>uint64 port_tx_undersized_packets = 13;</code>
       * @return The portTxUndersizedPackets.
       */
      long getPortTxUndersizedPackets();

      /**
       * <pre>
       *以太接口接收的超短帧数
       * </pre>
       *
       * <code>uint64 port_rx_undersized_packets = 14;</code>
       * @return The portRxUndersizedPackets.
       */
      long getPortRxUndersizedPackets();

      /**
       * <pre>
       *以太接口发送的分片帧数  (帧长小于64并且CRC错误的包数)
       * </pre>
       *
       * <code>uint64 port_tx_fragment_packets = 15;</code>
       * @return The portTxFragmentPackets.
       */
      long getPortTxFragmentPackets();

      /**
       * <pre>
       *以太接口接收的分片帧数
       * </pre>
       *
       * <code>uint64 port_rx_fragment_packets = 16;</code>
       * @return The portRxFragmentPackets.
       */
      long getPortRxFragmentPackets();

      /**
       * <pre>
       *以太接口发送的Jabber帧数  
       * </pre>
       *
       * <code>uint64 port_tx_jabber_packets = 17;</code>
       * @return The portTxJabberPackets.
       */
      long getPortTxJabberPackets();

      /**
       * <pre>
       *以太接口接收的Jabber帧数
       * </pre>
       *
       * <code>uint64 port_rx_jabber_packets = 18;</code>
       * @return The portRxJabberPackets.
       */
      long getPortRxJabberPackets();

      /**
       * <pre>
       *以太接口发送的所有错误帧数，包括超短帧、超长帧、CRC错误帧、对齐错误帧
       * </pre>
       *
       * <code>uint64 port_tx_error_packets = 19;</code>
       * @return The portTxErrorPackets.
       */
      long getPortTxErrorPackets();

      /**
       * <pre>
       *以太接口接收的所有错误帧数，包括超短帧、超长帧、CRC错误帧、对齐错误帧
       * </pre>
       *
       * <code>uint64 port_rx_error_packets = 20;</code>
       * @return The portRxErrorPackets.
       */
      long getPortRxErrorPackets();

      /**
       * <pre>
       *以太端口下行平均速率，单位kbps
       * </pre>
       *
       * <code>uint64 port_tx_rate = 21;</code>
       * @return The portTxRate.
       */
      long getPortTxRate();

      /**
       * <pre>
       *以太端口上行平均速率，单位kbps
       * </pre>
       *
       * <code>uint64 port_rx_rate = 22;</code>
       * @return The portRxRate.
       */
      long getPortRxRate();

      /**
       * <pre>
       *以太端口下行秒级峰值速率，单位kbps
       * </pre>
       *
       * <code>uint64 port_tx_peak_rate = 23;</code>
       * @return The portTxPeakRate.
       */
      long getPortTxPeakRate();

      /**
       * <pre>
       *以太端口上行秒级峰值速率，单位kbps
       * </pre>
       *
       * <code>uint64 port_rx_peak_rate = 24;</code>
       * @return The portRxPeakRate.
       */
      long getPortRxPeakRate();
    }
    /**
     * Protobuf type {@code an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord}
     */
    public  static final class EthernetPortKpiRecord extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord)
        EthernetPortKpiRecordOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use EthernetPortKpiRecord.newBuilder() to construct.
      private EthernetPortKpiRecord(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private EthernetPortKpiRecord() {
        name_ = "";
      }

      @java.lang.Override
      @SuppressWarnings({"unused"})
      protected java.lang.Object newInstance(
          UnusedPrivateParameter unused) {
        return new EthernetPortKpiRecord();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private EthernetPortKpiRecord(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                name_ = s;
                break;
              }
              case 16: {

                portTxBytes_ = input.readUInt64();
                break;
              }
              case 24: {

                portRxBytes_ = input.readUInt64();
                break;
              }
              case 32: {

                portTxPackets_ = input.readUInt64();
                break;
              }
              case 40: {

                portRxPackets_ = input.readUInt64();
                break;
              }
              case 48: {

                portTxDiscardPackets_ = input.readUInt64();
                break;
              }
              case 56: {

                portRxDiscardPackets_ = input.readUInt64();
                break;
              }
              case 64: {

                portRxAlignmentErrorPackets_ = input.readUInt64();
                break;
              }
              case 72: {

                portTxCrcErrorPackets_ = input.readUInt64();
                break;
              }
              case 80: {

                portRxCrcErrorPackets_ = input.readUInt64();
                break;
              }
              case 88: {

                portTxOversizedPackets_ = input.readUInt64();
                break;
              }
              case 96: {

                portRxOversizedPackets_ = input.readUInt64();
                break;
              }
              case 104: {

                portTxUndersizedPackets_ = input.readUInt64();
                break;
              }
              case 112: {

                portRxUndersizedPackets_ = input.readUInt64();
                break;
              }
              case 120: {

                portTxFragmentPackets_ = input.readUInt64();
                break;
              }
              case 128: {

                portRxFragmentPackets_ = input.readUInt64();
                break;
              }
              case 136: {

                portTxJabberPackets_ = input.readUInt64();
                break;
              }
              case 144: {

                portRxJabberPackets_ = input.readUInt64();
                break;
              }
              case 152: {

                portTxErrorPackets_ = input.readUInt64();
                break;
              }
              case 160: {

                portRxErrorPackets_ = input.readUInt64();
                break;
              }
              case 168: {

                portTxRate_ = input.readUInt64();
                break;
              }
              case 176: {

                portRxRate_ = input.readUInt64();
                break;
              }
              case 184: {

                portTxPeakRate_ = input.readUInt64();
                break;
              }
              case 192: {

                portRxPeakRate_ = input.readUInt64();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.telemetry.AnEthernetKpi.internal_static_an_ethernet_kpi_EthernetPortKpiRecords_EthernetPortKpiRecord_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.telemetry.AnEthernetKpi.internal_static_an_ethernet_kpi_EthernetPortKpiRecords_EthernetPortKpiRecord_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.class, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.Builder.class);
      }

      public static final int NAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object name_;
      /**
       * <pre>
       *ethernetCsmacd.f.s.p
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        }
      }
      /**
       * <pre>
       *ethernetCsmacd.f.s.p
       * </pre>
       *
       * <code>string name = 1;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int PORT_TX_BYTES_FIELD_NUMBER = 2;
      private long portTxBytes_;
      /**
       * <pre>
       *以太接口发送的字节数
       * </pre>
       *
       * <code>uint64 port_tx_bytes = 2;</code>
       * @return The portTxBytes.
       */
      public long getPortTxBytes() {
        return portTxBytes_;
      }

      public static final int PORT_RX_BYTES_FIELD_NUMBER = 3;
      private long portRxBytes_;
      /**
       * <pre>
       *以太接口接收的字节数
       * </pre>
       *
       * <code>uint64 port_rx_bytes = 3;</code>
       * @return The portRxBytes.
       */
      public long getPortRxBytes() {
        return portRxBytes_;
      }

      public static final int PORT_TX_PACKETS_FIELD_NUMBER = 4;
      private long portTxPackets_;
      /**
       * <pre>
       *以太接口发送的帧数
       * </pre>
       *
       * <code>uint64 port_tx_packets = 4;</code>
       * @return The portTxPackets.
       */
      public long getPortTxPackets() {
        return portTxPackets_;
      }

      public static final int PORT_RX_PACKETS_FIELD_NUMBER = 5;
      private long portRxPackets_;
      /**
       * <pre>
       *以太接口接收的帧数
       * </pre>
       *
       * <code>uint64 port_rx_packets = 5;</code>
       * @return The portRxPackets.
       */
      public long getPortRxPackets() {
        return portRxPackets_;
      }

      public static final int PORT_TX_DISCARD_PACKETS_FIELD_NUMBER = 6;
      private long portTxDiscardPackets_;
      /**
       * <pre>
       *以太接口发送方向丢弃的帧数，指由于MAC处理过程中各种原因导致丢弃的正确的数据帧，包括但不限于FIFO满而导致的丢包。（CRC错误、jabber、fragment均不统计）
       * </pre>
       *
       * <code>uint64 port_tx_discard_packets = 6;</code>
       * @return The portTxDiscardPackets.
       */
      public long getPortTxDiscardPackets() {
        return portTxDiscardPackets_;
      }

      public static final int PORT_RX_DISCARD_PACKETS_FIELD_NUMBER = 7;
      private long portRxDiscardPackets_;
      /**
       * <pre>
       *以太接口接收方向丢弃的帧数，指由于MAC处理过程中各种原因导致丢弃的正确的数据帧，包括但不限于FIFO满而导致的丢包。（CRC错误、jabber、fragment均不统计）
       * </pre>
       *
       * <code>uint64 port_rx_discard_packets = 7;</code>
       * @return The portRxDiscardPackets.
       */
      public long getPortRxDiscardPackets() {
        return portRxDiscardPackets_;
      }

      public static final int PORT_RX_ALIGNMENT_ERROR_PACKETS_FIELD_NUMBER = 8;
      private long portRxAlignmentErrorPackets_;
      /**
       * <pre>
       *以太接口接收的对齐错误的帧数
       * </pre>
       *
       * <code>uint64 port_rx_alignment_error_packets = 8;</code>
       * @return The portRxAlignmentErrorPackets.
       */
      public long getPortRxAlignmentErrorPackets() {
        return portRxAlignmentErrorPackets_;
      }

      public static final int PORT_TX_CRC_ERROR_PACKETS_FIELD_NUMBER = 9;
      private long portTxCrcErrorPackets_;
      /**
       * <pre>
       *以太接口发送方向的CRC错误帧数
       * </pre>
       *
       * <code>uint64 port_tx_crc_error_packets = 9;</code>
       * @return The portTxCrcErrorPackets.
       */
      public long getPortTxCrcErrorPackets() {
        return portTxCrcErrorPackets_;
      }

      public static final int PORT_RX_CRC_ERROR_PACKETS_FIELD_NUMBER = 10;
      private long portRxCrcErrorPackets_;
      /**
       * <pre>
       *以太接口接收方向的CRC错误帧数
       * </pre>
       *
       * <code>uint64 port_rx_crc_error_packets = 10;</code>
       * @return The portRxCrcErrorPackets.
       */
      public long getPortRxCrcErrorPackets() {
        return portRxCrcErrorPackets_;
      }

      public static final int PORT_TX_OVERSIZED_PACKETS_FIELD_NUMBER = 11;
      private long portTxOversizedPackets_;
      /**
       * <pre>
       *以太接口发送的超长帧数
       * </pre>
       *
       * <code>uint64 port_tx_oversized_packets = 11;</code>
       * @return The portTxOversizedPackets.
       */
      public long getPortTxOversizedPackets() {
        return portTxOversizedPackets_;
      }

      public static final int PORT_RX_OVERSIZED_PACKETS_FIELD_NUMBER = 12;
      private long portRxOversizedPackets_;
      /**
       * <pre>
       *以太接口接收的超长帧数
       * </pre>
       *
       * <code>uint64 port_rx_oversized_packets = 12;</code>
       * @return The portRxOversizedPackets.
       */
      public long getPortRxOversizedPackets() {
        return portRxOversizedPackets_;
      }

      public static final int PORT_TX_UNDERSIZED_PACKETS_FIELD_NUMBER = 13;
      private long portTxUndersizedPackets_;
      /**
       * <pre>
       *以太接口发送的超短帧数  （帧长小于64并且CRC正确的包数)
       * </pre>
       *
       * <code>uint64 port_tx_undersized_packets = 13;</code>
       * @return The portTxUndersizedPackets.
       */
      public long getPortTxUndersizedPackets() {
        return portTxUndersizedPackets_;
      }

      public static final int PORT_RX_UNDERSIZED_PACKETS_FIELD_NUMBER = 14;
      private long portRxUndersizedPackets_;
      /**
       * <pre>
       *以太接口接收的超短帧数
       * </pre>
       *
       * <code>uint64 port_rx_undersized_packets = 14;</code>
       * @return The portRxUndersizedPackets.
       */
      public long getPortRxUndersizedPackets() {
        return portRxUndersizedPackets_;
      }

      public static final int PORT_TX_FRAGMENT_PACKETS_FIELD_NUMBER = 15;
      private long portTxFragmentPackets_;
      /**
       * <pre>
       *以太接口发送的分片帧数  (帧长小于64并且CRC错误的包数)
       * </pre>
       *
       * <code>uint64 port_tx_fragment_packets = 15;</code>
       * @return The portTxFragmentPackets.
       */
      public long getPortTxFragmentPackets() {
        return portTxFragmentPackets_;
      }

      public static final int PORT_RX_FRAGMENT_PACKETS_FIELD_NUMBER = 16;
      private long portRxFragmentPackets_;
      /**
       * <pre>
       *以太接口接收的分片帧数
       * </pre>
       *
       * <code>uint64 port_rx_fragment_packets = 16;</code>
       * @return The portRxFragmentPackets.
       */
      public long getPortRxFragmentPackets() {
        return portRxFragmentPackets_;
      }

      public static final int PORT_TX_JABBER_PACKETS_FIELD_NUMBER = 17;
      private long portTxJabberPackets_;
      /**
       * <pre>
       *以太接口发送的Jabber帧数  
       * </pre>
       *
       * <code>uint64 port_tx_jabber_packets = 17;</code>
       * @return The portTxJabberPackets.
       */
      public long getPortTxJabberPackets() {
        return portTxJabberPackets_;
      }

      public static final int PORT_RX_JABBER_PACKETS_FIELD_NUMBER = 18;
      private long portRxJabberPackets_;
      /**
       * <pre>
       *以太接口接收的Jabber帧数
       * </pre>
       *
       * <code>uint64 port_rx_jabber_packets = 18;</code>
       * @return The portRxJabberPackets.
       */
      public long getPortRxJabberPackets() {
        return portRxJabberPackets_;
      }

      public static final int PORT_TX_ERROR_PACKETS_FIELD_NUMBER = 19;
      private long portTxErrorPackets_;
      /**
       * <pre>
       *以太接口发送的所有错误帧数，包括超短帧、超长帧、CRC错误帧、对齐错误帧
       * </pre>
       *
       * <code>uint64 port_tx_error_packets = 19;</code>
       * @return The portTxErrorPackets.
       */
      public long getPortTxErrorPackets() {
        return portTxErrorPackets_;
      }

      public static final int PORT_RX_ERROR_PACKETS_FIELD_NUMBER = 20;
      private long portRxErrorPackets_;
      /**
       * <pre>
       *以太接口接收的所有错误帧数，包括超短帧、超长帧、CRC错误帧、对齐错误帧
       * </pre>
       *
       * <code>uint64 port_rx_error_packets = 20;</code>
       * @return The portRxErrorPackets.
       */
      public long getPortRxErrorPackets() {
        return portRxErrorPackets_;
      }

      public static final int PORT_TX_RATE_FIELD_NUMBER = 21;
      private long portTxRate_;
      /**
       * <pre>
       *以太端口下行平均速率，单位kbps
       * </pre>
       *
       * <code>uint64 port_tx_rate = 21;</code>
       * @return The portTxRate.
       */
      public long getPortTxRate() {
        return portTxRate_;
      }

      public static final int PORT_RX_RATE_FIELD_NUMBER = 22;
      private long portRxRate_;
      /**
       * <pre>
       *以太端口上行平均速率，单位kbps
       * </pre>
       *
       * <code>uint64 port_rx_rate = 22;</code>
       * @return The portRxRate.
       */
      public long getPortRxRate() {
        return portRxRate_;
      }

      public static final int PORT_TX_PEAK_RATE_FIELD_NUMBER = 23;
      private long portTxPeakRate_;
      /**
       * <pre>
       *以太端口下行秒级峰值速率，单位kbps
       * </pre>
       *
       * <code>uint64 port_tx_peak_rate = 23;</code>
       * @return The portTxPeakRate.
       */
      public long getPortTxPeakRate() {
        return portTxPeakRate_;
      }

      public static final int PORT_RX_PEAK_RATE_FIELD_NUMBER = 24;
      private long portRxPeakRate_;
      /**
       * <pre>
       *以太端口上行秒级峰值速率，单位kbps
       * </pre>
       *
       * <code>uint64 port_rx_peak_rate = 24;</code>
       * @return The portRxPeakRate.
       */
      public long getPortRxPeakRate() {
        return portRxPeakRate_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getNameBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
        }
        if (portTxBytes_ != 0L) {
          output.writeUInt64(2, portTxBytes_);
        }
        if (portRxBytes_ != 0L) {
          output.writeUInt64(3, portRxBytes_);
        }
        if (portTxPackets_ != 0L) {
          output.writeUInt64(4, portTxPackets_);
        }
        if (portRxPackets_ != 0L) {
          output.writeUInt64(5, portRxPackets_);
        }
        if (portTxDiscardPackets_ != 0L) {
          output.writeUInt64(6, portTxDiscardPackets_);
        }
        if (portRxDiscardPackets_ != 0L) {
          output.writeUInt64(7, portRxDiscardPackets_);
        }
        if (portRxAlignmentErrorPackets_ != 0L) {
          output.writeUInt64(8, portRxAlignmentErrorPackets_);
        }
        if (portTxCrcErrorPackets_ != 0L) {
          output.writeUInt64(9, portTxCrcErrorPackets_);
        }
        if (portRxCrcErrorPackets_ != 0L) {
          output.writeUInt64(10, portRxCrcErrorPackets_);
        }
        if (portTxOversizedPackets_ != 0L) {
          output.writeUInt64(11, portTxOversizedPackets_);
        }
        if (portRxOversizedPackets_ != 0L) {
          output.writeUInt64(12, portRxOversizedPackets_);
        }
        if (portTxUndersizedPackets_ != 0L) {
          output.writeUInt64(13, portTxUndersizedPackets_);
        }
        if (portRxUndersizedPackets_ != 0L) {
          output.writeUInt64(14, portRxUndersizedPackets_);
        }
        if (portTxFragmentPackets_ != 0L) {
          output.writeUInt64(15, portTxFragmentPackets_);
        }
        if (portRxFragmentPackets_ != 0L) {
          output.writeUInt64(16, portRxFragmentPackets_);
        }
        if (portTxJabberPackets_ != 0L) {
          output.writeUInt64(17, portTxJabberPackets_);
        }
        if (portRxJabberPackets_ != 0L) {
          output.writeUInt64(18, portRxJabberPackets_);
        }
        if (portTxErrorPackets_ != 0L) {
          output.writeUInt64(19, portTxErrorPackets_);
        }
        if (portRxErrorPackets_ != 0L) {
          output.writeUInt64(20, portRxErrorPackets_);
        }
        if (portTxRate_ != 0L) {
          output.writeUInt64(21, portTxRate_);
        }
        if (portRxRate_ != 0L) {
          output.writeUInt64(22, portRxRate_);
        }
        if (portTxPeakRate_ != 0L) {
          output.writeUInt64(23, portTxPeakRate_);
        }
        if (portRxPeakRate_ != 0L) {
          output.writeUInt64(24, portRxPeakRate_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getNameBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
        }
        if (portTxBytes_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(2, portTxBytes_);
        }
        if (portRxBytes_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(3, portRxBytes_);
        }
        if (portTxPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(4, portTxPackets_);
        }
        if (portRxPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(5, portRxPackets_);
        }
        if (portTxDiscardPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(6, portTxDiscardPackets_);
        }
        if (portRxDiscardPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(7, portRxDiscardPackets_);
        }
        if (portRxAlignmentErrorPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(8, portRxAlignmentErrorPackets_);
        }
        if (portTxCrcErrorPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(9, portTxCrcErrorPackets_);
        }
        if (portRxCrcErrorPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(10, portRxCrcErrorPackets_);
        }
        if (portTxOversizedPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(11, portTxOversizedPackets_);
        }
        if (portRxOversizedPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(12, portRxOversizedPackets_);
        }
        if (portTxUndersizedPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(13, portTxUndersizedPackets_);
        }
        if (portRxUndersizedPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(14, portRxUndersizedPackets_);
        }
        if (portTxFragmentPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(15, portTxFragmentPackets_);
        }
        if (portRxFragmentPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(16, portRxFragmentPackets_);
        }
        if (portTxJabberPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(17, portTxJabberPackets_);
        }
        if (portRxJabberPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(18, portRxJabberPackets_);
        }
        if (portTxErrorPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(19, portTxErrorPackets_);
        }
        if (portRxErrorPackets_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(20, portRxErrorPackets_);
        }
        if (portTxRate_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(21, portTxRate_);
        }
        if (portRxRate_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(22, portRxRate_);
        }
        if (portTxPeakRate_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(23, portTxPeakRate_);
        }
        if (portRxPeakRate_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(24, portRxPeakRate_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord)) {
          return super.equals(obj);
        }
        com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord other = (com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord) obj;

        if (!getName()
            .equals(other.getName())) return false;
        if (getPortTxBytes()
            != other.getPortTxBytes()) return false;
        if (getPortRxBytes()
            != other.getPortRxBytes()) return false;
        if (getPortTxPackets()
            != other.getPortTxPackets()) return false;
        if (getPortRxPackets()
            != other.getPortRxPackets()) return false;
        if (getPortTxDiscardPackets()
            != other.getPortTxDiscardPackets()) return false;
        if (getPortRxDiscardPackets()
            != other.getPortRxDiscardPackets()) return false;
        if (getPortRxAlignmentErrorPackets()
            != other.getPortRxAlignmentErrorPackets()) return false;
        if (getPortTxCrcErrorPackets()
            != other.getPortTxCrcErrorPackets()) return false;
        if (getPortRxCrcErrorPackets()
            != other.getPortRxCrcErrorPackets()) return false;
        if (getPortTxOversizedPackets()
            != other.getPortTxOversizedPackets()) return false;
        if (getPortRxOversizedPackets()
            != other.getPortRxOversizedPackets()) return false;
        if (getPortTxUndersizedPackets()
            != other.getPortTxUndersizedPackets()) return false;
        if (getPortRxUndersizedPackets()
            != other.getPortRxUndersizedPackets()) return false;
        if (getPortTxFragmentPackets()
            != other.getPortTxFragmentPackets()) return false;
        if (getPortRxFragmentPackets()
            != other.getPortRxFragmentPackets()) return false;
        if (getPortTxJabberPackets()
            != other.getPortTxJabberPackets()) return false;
        if (getPortRxJabberPackets()
            != other.getPortRxJabberPackets()) return false;
        if (getPortTxErrorPackets()
            != other.getPortTxErrorPackets()) return false;
        if (getPortRxErrorPackets()
            != other.getPortRxErrorPackets()) return false;
        if (getPortTxRate()
            != other.getPortTxRate()) return false;
        if (getPortRxRate()
            != other.getPortRxRate()) return false;
        if (getPortTxPeakRate()
            != other.getPortTxPeakRate()) return false;
        if (getPortRxPeakRate()
            != other.getPortRxPeakRate()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
        hash = (37 * hash) + PORT_TX_BYTES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortTxBytes());
        hash = (37 * hash) + PORT_RX_BYTES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortRxBytes());
        hash = (37 * hash) + PORT_TX_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortTxPackets());
        hash = (37 * hash) + PORT_RX_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortRxPackets());
        hash = (37 * hash) + PORT_TX_DISCARD_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortTxDiscardPackets());
        hash = (37 * hash) + PORT_RX_DISCARD_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortRxDiscardPackets());
        hash = (37 * hash) + PORT_RX_ALIGNMENT_ERROR_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortRxAlignmentErrorPackets());
        hash = (37 * hash) + PORT_TX_CRC_ERROR_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortTxCrcErrorPackets());
        hash = (37 * hash) + PORT_RX_CRC_ERROR_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortRxCrcErrorPackets());
        hash = (37 * hash) + PORT_TX_OVERSIZED_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortTxOversizedPackets());
        hash = (37 * hash) + PORT_RX_OVERSIZED_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortRxOversizedPackets());
        hash = (37 * hash) + PORT_TX_UNDERSIZED_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortTxUndersizedPackets());
        hash = (37 * hash) + PORT_RX_UNDERSIZED_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortRxUndersizedPackets());
        hash = (37 * hash) + PORT_TX_FRAGMENT_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortTxFragmentPackets());
        hash = (37 * hash) + PORT_RX_FRAGMENT_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortRxFragmentPackets());
        hash = (37 * hash) + PORT_TX_JABBER_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortTxJabberPackets());
        hash = (37 * hash) + PORT_RX_JABBER_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortRxJabberPackets());
        hash = (37 * hash) + PORT_TX_ERROR_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortTxErrorPackets());
        hash = (37 * hash) + PORT_RX_ERROR_PACKETS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortRxErrorPackets());
        hash = (37 * hash) + PORT_TX_RATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortTxRate());
        hash = (37 * hash) + PORT_RX_RATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortRxRate());
        hash = (37 * hash) + PORT_TX_PEAK_RATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortTxPeakRate());
        hash = (37 * hash) + PORT_RX_PEAK_RATE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getPortRxPeakRate());
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord)
          com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecordOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.telemetry.AnEthernetKpi.internal_static_an_ethernet_kpi_EthernetPortKpiRecords_EthernetPortKpiRecord_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.telemetry.AnEthernetKpi.internal_static_an_ethernet_kpi_EthernetPortKpiRecords_EthernetPortKpiRecord_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.class, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.Builder.class);
        }

        // Construct using com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          name_ = "";

          portTxBytes_ = 0L;

          portRxBytes_ = 0L;

          portTxPackets_ = 0L;

          portRxPackets_ = 0L;

          portTxDiscardPackets_ = 0L;

          portRxDiscardPackets_ = 0L;

          portRxAlignmentErrorPackets_ = 0L;

          portTxCrcErrorPackets_ = 0L;

          portRxCrcErrorPackets_ = 0L;

          portTxOversizedPackets_ = 0L;

          portRxOversizedPackets_ = 0L;

          portTxUndersizedPackets_ = 0L;

          portRxUndersizedPackets_ = 0L;

          portTxFragmentPackets_ = 0L;

          portRxFragmentPackets_ = 0L;

          portTxJabberPackets_ = 0L;

          portRxJabberPackets_ = 0L;

          portTxErrorPackets_ = 0L;

          portRxErrorPackets_ = 0L;

          portTxRate_ = 0L;

          portRxRate_ = 0L;

          portTxPeakRate_ = 0L;

          portRxPeakRate_ = 0L;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.telemetry.AnEthernetKpi.internal_static_an_ethernet_kpi_EthernetPortKpiRecords_EthernetPortKpiRecord_descriptor;
        }

        @java.lang.Override
        public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord getDefaultInstanceForType() {
          return com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.getDefaultInstance();
        }

        @java.lang.Override
        public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord build() {
          com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord buildPartial() {
          com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord result = new com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord(this);
          result.name_ = name_;
          result.portTxBytes_ = portTxBytes_;
          result.portRxBytes_ = portRxBytes_;
          result.portTxPackets_ = portTxPackets_;
          result.portRxPackets_ = portRxPackets_;
          result.portTxDiscardPackets_ = portTxDiscardPackets_;
          result.portRxDiscardPackets_ = portRxDiscardPackets_;
          result.portRxAlignmentErrorPackets_ = portRxAlignmentErrorPackets_;
          result.portTxCrcErrorPackets_ = portTxCrcErrorPackets_;
          result.portRxCrcErrorPackets_ = portRxCrcErrorPackets_;
          result.portTxOversizedPackets_ = portTxOversizedPackets_;
          result.portRxOversizedPackets_ = portRxOversizedPackets_;
          result.portTxUndersizedPackets_ = portTxUndersizedPackets_;
          result.portRxUndersizedPackets_ = portRxUndersizedPackets_;
          result.portTxFragmentPackets_ = portTxFragmentPackets_;
          result.portRxFragmentPackets_ = portRxFragmentPackets_;
          result.portTxJabberPackets_ = portTxJabberPackets_;
          result.portRxJabberPackets_ = portRxJabberPackets_;
          result.portTxErrorPackets_ = portTxErrorPackets_;
          result.portRxErrorPackets_ = portRxErrorPackets_;
          result.portTxRate_ = portTxRate_;
          result.portRxRate_ = portRxRate_;
          result.portTxPeakRate_ = portTxPeakRate_;
          result.portRxPeakRate_ = portRxPeakRate_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord) {
            return mergeFrom((com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord other) {
          if (other == com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.getDefaultInstance()) return this;
          if (!other.getName().isEmpty()) {
            name_ = other.name_;
            onChanged();
          }
          if (other.getPortTxBytes() != 0L) {
            setPortTxBytes(other.getPortTxBytes());
          }
          if (other.getPortRxBytes() != 0L) {
            setPortRxBytes(other.getPortRxBytes());
          }
          if (other.getPortTxPackets() != 0L) {
            setPortTxPackets(other.getPortTxPackets());
          }
          if (other.getPortRxPackets() != 0L) {
            setPortRxPackets(other.getPortRxPackets());
          }
          if (other.getPortTxDiscardPackets() != 0L) {
            setPortTxDiscardPackets(other.getPortTxDiscardPackets());
          }
          if (other.getPortRxDiscardPackets() != 0L) {
            setPortRxDiscardPackets(other.getPortRxDiscardPackets());
          }
          if (other.getPortRxAlignmentErrorPackets() != 0L) {
            setPortRxAlignmentErrorPackets(other.getPortRxAlignmentErrorPackets());
          }
          if (other.getPortTxCrcErrorPackets() != 0L) {
            setPortTxCrcErrorPackets(other.getPortTxCrcErrorPackets());
          }
          if (other.getPortRxCrcErrorPackets() != 0L) {
            setPortRxCrcErrorPackets(other.getPortRxCrcErrorPackets());
          }
          if (other.getPortTxOversizedPackets() != 0L) {
            setPortTxOversizedPackets(other.getPortTxOversizedPackets());
          }
          if (other.getPortRxOversizedPackets() != 0L) {
            setPortRxOversizedPackets(other.getPortRxOversizedPackets());
          }
          if (other.getPortTxUndersizedPackets() != 0L) {
            setPortTxUndersizedPackets(other.getPortTxUndersizedPackets());
          }
          if (other.getPortRxUndersizedPackets() != 0L) {
            setPortRxUndersizedPackets(other.getPortRxUndersizedPackets());
          }
          if (other.getPortTxFragmentPackets() != 0L) {
            setPortTxFragmentPackets(other.getPortTxFragmentPackets());
          }
          if (other.getPortRxFragmentPackets() != 0L) {
            setPortRxFragmentPackets(other.getPortRxFragmentPackets());
          }
          if (other.getPortTxJabberPackets() != 0L) {
            setPortTxJabberPackets(other.getPortTxJabberPackets());
          }
          if (other.getPortRxJabberPackets() != 0L) {
            setPortRxJabberPackets(other.getPortRxJabberPackets());
          }
          if (other.getPortTxErrorPackets() != 0L) {
            setPortTxErrorPackets(other.getPortTxErrorPackets());
          }
          if (other.getPortRxErrorPackets() != 0L) {
            setPortRxErrorPackets(other.getPortRxErrorPackets());
          }
          if (other.getPortTxRate() != 0L) {
            setPortTxRate(other.getPortTxRate());
          }
          if (other.getPortRxRate() != 0L) {
            setPortRxRate(other.getPortRxRate());
          }
          if (other.getPortTxPeakRate() != 0L) {
            setPortTxPeakRate(other.getPortTxPeakRate());
          }
          if (other.getPortRxPeakRate() != 0L) {
            setPortRxPeakRate(other.getPortRxPeakRate());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object name_ = "";
        /**
         * <pre>
         *ethernetCsmacd.f.s.p
         * </pre>
         *
         * <code>string name = 1;</code>
         * @return The name.
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            name_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         *ethernetCsmacd.f.s.p
         * </pre>
         *
         * <code>string name = 1;</code>
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         *ethernetCsmacd.f.s.p
         * </pre>
         *
         * <code>string name = 1;</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *ethernetCsmacd.f.s.p
         * </pre>
         *
         * <code>string name = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
          
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <pre>
         *ethernetCsmacd.f.s.p
         * </pre>
         *
         * <code>string name = 1;</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          name_ = value;
          onChanged();
          return this;
        }

        private long portTxBytes_ ;
        /**
         * <pre>
         *以太接口发送的字节数
         * </pre>
         *
         * <code>uint64 port_tx_bytes = 2;</code>
         * @return The portTxBytes.
         */
        public long getPortTxBytes() {
          return portTxBytes_;
        }
        /**
         * <pre>
         *以太接口发送的字节数
         * </pre>
         *
         * <code>uint64 port_tx_bytes = 2;</code>
         * @param value The portTxBytes to set.
         * @return This builder for chaining.
         */
        public Builder setPortTxBytes(long value) {
          
          portTxBytes_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口发送的字节数
         * </pre>
         *
         * <code>uint64 port_tx_bytes = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortTxBytes() {
          
          portTxBytes_ = 0L;
          onChanged();
          return this;
        }

        private long portRxBytes_ ;
        /**
         * <pre>
         *以太接口接收的字节数
         * </pre>
         *
         * <code>uint64 port_rx_bytes = 3;</code>
         * @return The portRxBytes.
         */
        public long getPortRxBytes() {
          return portRxBytes_;
        }
        /**
         * <pre>
         *以太接口接收的字节数
         * </pre>
         *
         * <code>uint64 port_rx_bytes = 3;</code>
         * @param value The portRxBytes to set.
         * @return This builder for chaining.
         */
        public Builder setPortRxBytes(long value) {
          
          portRxBytes_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口接收的字节数
         * </pre>
         *
         * <code>uint64 port_rx_bytes = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortRxBytes() {
          
          portRxBytes_ = 0L;
          onChanged();
          return this;
        }

        private long portTxPackets_ ;
        /**
         * <pre>
         *以太接口发送的帧数
         * </pre>
         *
         * <code>uint64 port_tx_packets = 4;</code>
         * @return The portTxPackets.
         */
        public long getPortTxPackets() {
          return portTxPackets_;
        }
        /**
         * <pre>
         *以太接口发送的帧数
         * </pre>
         *
         * <code>uint64 port_tx_packets = 4;</code>
         * @param value The portTxPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortTxPackets(long value) {
          
          portTxPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口发送的帧数
         * </pre>
         *
         * <code>uint64 port_tx_packets = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortTxPackets() {
          
          portTxPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portRxPackets_ ;
        /**
         * <pre>
         *以太接口接收的帧数
         * </pre>
         *
         * <code>uint64 port_rx_packets = 5;</code>
         * @return The portRxPackets.
         */
        public long getPortRxPackets() {
          return portRxPackets_;
        }
        /**
         * <pre>
         *以太接口接收的帧数
         * </pre>
         *
         * <code>uint64 port_rx_packets = 5;</code>
         * @param value The portRxPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortRxPackets(long value) {
          
          portRxPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口接收的帧数
         * </pre>
         *
         * <code>uint64 port_rx_packets = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortRxPackets() {
          
          portRxPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portTxDiscardPackets_ ;
        /**
         * <pre>
         *以太接口发送方向丢弃的帧数，指由于MAC处理过程中各种原因导致丢弃的正确的数据帧，包括但不限于FIFO满而导致的丢包。（CRC错误、jabber、fragment均不统计）
         * </pre>
         *
         * <code>uint64 port_tx_discard_packets = 6;</code>
         * @return The portTxDiscardPackets.
         */
        public long getPortTxDiscardPackets() {
          return portTxDiscardPackets_;
        }
        /**
         * <pre>
         *以太接口发送方向丢弃的帧数，指由于MAC处理过程中各种原因导致丢弃的正确的数据帧，包括但不限于FIFO满而导致的丢包。（CRC错误、jabber、fragment均不统计）
         * </pre>
         *
         * <code>uint64 port_tx_discard_packets = 6;</code>
         * @param value The portTxDiscardPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortTxDiscardPackets(long value) {
          
          portTxDiscardPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口发送方向丢弃的帧数，指由于MAC处理过程中各种原因导致丢弃的正确的数据帧，包括但不限于FIFO满而导致的丢包。（CRC错误、jabber、fragment均不统计）
         * </pre>
         *
         * <code>uint64 port_tx_discard_packets = 6;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortTxDiscardPackets() {
          
          portTxDiscardPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portRxDiscardPackets_ ;
        /**
         * <pre>
         *以太接口接收方向丢弃的帧数，指由于MAC处理过程中各种原因导致丢弃的正确的数据帧，包括但不限于FIFO满而导致的丢包。（CRC错误、jabber、fragment均不统计）
         * </pre>
         *
         * <code>uint64 port_rx_discard_packets = 7;</code>
         * @return The portRxDiscardPackets.
         */
        public long getPortRxDiscardPackets() {
          return portRxDiscardPackets_;
        }
        /**
         * <pre>
         *以太接口接收方向丢弃的帧数，指由于MAC处理过程中各种原因导致丢弃的正确的数据帧，包括但不限于FIFO满而导致的丢包。（CRC错误、jabber、fragment均不统计）
         * </pre>
         *
         * <code>uint64 port_rx_discard_packets = 7;</code>
         * @param value The portRxDiscardPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortRxDiscardPackets(long value) {
          
          portRxDiscardPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口接收方向丢弃的帧数，指由于MAC处理过程中各种原因导致丢弃的正确的数据帧，包括但不限于FIFO满而导致的丢包。（CRC错误、jabber、fragment均不统计）
         * </pre>
         *
         * <code>uint64 port_rx_discard_packets = 7;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortRxDiscardPackets() {
          
          portRxDiscardPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portRxAlignmentErrorPackets_ ;
        /**
         * <pre>
         *以太接口接收的对齐错误的帧数
         * </pre>
         *
         * <code>uint64 port_rx_alignment_error_packets = 8;</code>
         * @return The portRxAlignmentErrorPackets.
         */
        public long getPortRxAlignmentErrorPackets() {
          return portRxAlignmentErrorPackets_;
        }
        /**
         * <pre>
         *以太接口接收的对齐错误的帧数
         * </pre>
         *
         * <code>uint64 port_rx_alignment_error_packets = 8;</code>
         * @param value The portRxAlignmentErrorPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortRxAlignmentErrorPackets(long value) {
          
          portRxAlignmentErrorPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口接收的对齐错误的帧数
         * </pre>
         *
         * <code>uint64 port_rx_alignment_error_packets = 8;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortRxAlignmentErrorPackets() {
          
          portRxAlignmentErrorPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portTxCrcErrorPackets_ ;
        /**
         * <pre>
         *以太接口发送方向的CRC错误帧数
         * </pre>
         *
         * <code>uint64 port_tx_crc_error_packets = 9;</code>
         * @return The portTxCrcErrorPackets.
         */
        public long getPortTxCrcErrorPackets() {
          return portTxCrcErrorPackets_;
        }
        /**
         * <pre>
         *以太接口发送方向的CRC错误帧数
         * </pre>
         *
         * <code>uint64 port_tx_crc_error_packets = 9;</code>
         * @param value The portTxCrcErrorPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortTxCrcErrorPackets(long value) {
          
          portTxCrcErrorPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口发送方向的CRC错误帧数
         * </pre>
         *
         * <code>uint64 port_tx_crc_error_packets = 9;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortTxCrcErrorPackets() {
          
          portTxCrcErrorPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portRxCrcErrorPackets_ ;
        /**
         * <pre>
         *以太接口接收方向的CRC错误帧数
         * </pre>
         *
         * <code>uint64 port_rx_crc_error_packets = 10;</code>
         * @return The portRxCrcErrorPackets.
         */
        public long getPortRxCrcErrorPackets() {
          return portRxCrcErrorPackets_;
        }
        /**
         * <pre>
         *以太接口接收方向的CRC错误帧数
         * </pre>
         *
         * <code>uint64 port_rx_crc_error_packets = 10;</code>
         * @param value The portRxCrcErrorPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortRxCrcErrorPackets(long value) {
          
          portRxCrcErrorPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口接收方向的CRC错误帧数
         * </pre>
         *
         * <code>uint64 port_rx_crc_error_packets = 10;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortRxCrcErrorPackets() {
          
          portRxCrcErrorPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portTxOversizedPackets_ ;
        /**
         * <pre>
         *以太接口发送的超长帧数
         * </pre>
         *
         * <code>uint64 port_tx_oversized_packets = 11;</code>
         * @return The portTxOversizedPackets.
         */
        public long getPortTxOversizedPackets() {
          return portTxOversizedPackets_;
        }
        /**
         * <pre>
         *以太接口发送的超长帧数
         * </pre>
         *
         * <code>uint64 port_tx_oversized_packets = 11;</code>
         * @param value The portTxOversizedPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortTxOversizedPackets(long value) {
          
          portTxOversizedPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口发送的超长帧数
         * </pre>
         *
         * <code>uint64 port_tx_oversized_packets = 11;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortTxOversizedPackets() {
          
          portTxOversizedPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portRxOversizedPackets_ ;
        /**
         * <pre>
         *以太接口接收的超长帧数
         * </pre>
         *
         * <code>uint64 port_rx_oversized_packets = 12;</code>
         * @return The portRxOversizedPackets.
         */
        public long getPortRxOversizedPackets() {
          return portRxOversizedPackets_;
        }
        /**
         * <pre>
         *以太接口接收的超长帧数
         * </pre>
         *
         * <code>uint64 port_rx_oversized_packets = 12;</code>
         * @param value The portRxOversizedPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortRxOversizedPackets(long value) {
          
          portRxOversizedPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口接收的超长帧数
         * </pre>
         *
         * <code>uint64 port_rx_oversized_packets = 12;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortRxOversizedPackets() {
          
          portRxOversizedPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portTxUndersizedPackets_ ;
        /**
         * <pre>
         *以太接口发送的超短帧数  （帧长小于64并且CRC正确的包数)
         * </pre>
         *
         * <code>uint64 port_tx_undersized_packets = 13;</code>
         * @return The portTxUndersizedPackets.
         */
        public long getPortTxUndersizedPackets() {
          return portTxUndersizedPackets_;
        }
        /**
         * <pre>
         *以太接口发送的超短帧数  （帧长小于64并且CRC正确的包数)
         * </pre>
         *
         * <code>uint64 port_tx_undersized_packets = 13;</code>
         * @param value The portTxUndersizedPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortTxUndersizedPackets(long value) {
          
          portTxUndersizedPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口发送的超短帧数  （帧长小于64并且CRC正确的包数)
         * </pre>
         *
         * <code>uint64 port_tx_undersized_packets = 13;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortTxUndersizedPackets() {
          
          portTxUndersizedPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portRxUndersizedPackets_ ;
        /**
         * <pre>
         *以太接口接收的超短帧数
         * </pre>
         *
         * <code>uint64 port_rx_undersized_packets = 14;</code>
         * @return The portRxUndersizedPackets.
         */
        public long getPortRxUndersizedPackets() {
          return portRxUndersizedPackets_;
        }
        /**
         * <pre>
         *以太接口接收的超短帧数
         * </pre>
         *
         * <code>uint64 port_rx_undersized_packets = 14;</code>
         * @param value The portRxUndersizedPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortRxUndersizedPackets(long value) {
          
          portRxUndersizedPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口接收的超短帧数
         * </pre>
         *
         * <code>uint64 port_rx_undersized_packets = 14;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortRxUndersizedPackets() {
          
          portRxUndersizedPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portTxFragmentPackets_ ;
        /**
         * <pre>
         *以太接口发送的分片帧数  (帧长小于64并且CRC错误的包数)
         * </pre>
         *
         * <code>uint64 port_tx_fragment_packets = 15;</code>
         * @return The portTxFragmentPackets.
         */
        public long getPortTxFragmentPackets() {
          return portTxFragmentPackets_;
        }
        /**
         * <pre>
         *以太接口发送的分片帧数  (帧长小于64并且CRC错误的包数)
         * </pre>
         *
         * <code>uint64 port_tx_fragment_packets = 15;</code>
         * @param value The portTxFragmentPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortTxFragmentPackets(long value) {
          
          portTxFragmentPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口发送的分片帧数  (帧长小于64并且CRC错误的包数)
         * </pre>
         *
         * <code>uint64 port_tx_fragment_packets = 15;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortTxFragmentPackets() {
          
          portTxFragmentPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portRxFragmentPackets_ ;
        /**
         * <pre>
         *以太接口接收的分片帧数
         * </pre>
         *
         * <code>uint64 port_rx_fragment_packets = 16;</code>
         * @return The portRxFragmentPackets.
         */
        public long getPortRxFragmentPackets() {
          return portRxFragmentPackets_;
        }
        /**
         * <pre>
         *以太接口接收的分片帧数
         * </pre>
         *
         * <code>uint64 port_rx_fragment_packets = 16;</code>
         * @param value The portRxFragmentPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortRxFragmentPackets(long value) {
          
          portRxFragmentPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口接收的分片帧数
         * </pre>
         *
         * <code>uint64 port_rx_fragment_packets = 16;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortRxFragmentPackets() {
          
          portRxFragmentPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portTxJabberPackets_ ;
        /**
         * <pre>
         *以太接口发送的Jabber帧数  
         * </pre>
         *
         * <code>uint64 port_tx_jabber_packets = 17;</code>
         * @return The portTxJabberPackets.
         */
        public long getPortTxJabberPackets() {
          return portTxJabberPackets_;
        }
        /**
         * <pre>
         *以太接口发送的Jabber帧数  
         * </pre>
         *
         * <code>uint64 port_tx_jabber_packets = 17;</code>
         * @param value The portTxJabberPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortTxJabberPackets(long value) {
          
          portTxJabberPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口发送的Jabber帧数  
         * </pre>
         *
         * <code>uint64 port_tx_jabber_packets = 17;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortTxJabberPackets() {
          
          portTxJabberPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portRxJabberPackets_ ;
        /**
         * <pre>
         *以太接口接收的Jabber帧数
         * </pre>
         *
         * <code>uint64 port_rx_jabber_packets = 18;</code>
         * @return The portRxJabberPackets.
         */
        public long getPortRxJabberPackets() {
          return portRxJabberPackets_;
        }
        /**
         * <pre>
         *以太接口接收的Jabber帧数
         * </pre>
         *
         * <code>uint64 port_rx_jabber_packets = 18;</code>
         * @param value The portRxJabberPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortRxJabberPackets(long value) {
          
          portRxJabberPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口接收的Jabber帧数
         * </pre>
         *
         * <code>uint64 port_rx_jabber_packets = 18;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortRxJabberPackets() {
          
          portRxJabberPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portTxErrorPackets_ ;
        /**
         * <pre>
         *以太接口发送的所有错误帧数，包括超短帧、超长帧、CRC错误帧、对齐错误帧
         * </pre>
         *
         * <code>uint64 port_tx_error_packets = 19;</code>
         * @return The portTxErrorPackets.
         */
        public long getPortTxErrorPackets() {
          return portTxErrorPackets_;
        }
        /**
         * <pre>
         *以太接口发送的所有错误帧数，包括超短帧、超长帧、CRC错误帧、对齐错误帧
         * </pre>
         *
         * <code>uint64 port_tx_error_packets = 19;</code>
         * @param value The portTxErrorPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortTxErrorPackets(long value) {
          
          portTxErrorPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口发送的所有错误帧数，包括超短帧、超长帧、CRC错误帧、对齐错误帧
         * </pre>
         *
         * <code>uint64 port_tx_error_packets = 19;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortTxErrorPackets() {
          
          portTxErrorPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portRxErrorPackets_ ;
        /**
         * <pre>
         *以太接口接收的所有错误帧数，包括超短帧、超长帧、CRC错误帧、对齐错误帧
         * </pre>
         *
         * <code>uint64 port_rx_error_packets = 20;</code>
         * @return The portRxErrorPackets.
         */
        public long getPortRxErrorPackets() {
          return portRxErrorPackets_;
        }
        /**
         * <pre>
         *以太接口接收的所有错误帧数，包括超短帧、超长帧、CRC错误帧、对齐错误帧
         * </pre>
         *
         * <code>uint64 port_rx_error_packets = 20;</code>
         * @param value The portRxErrorPackets to set.
         * @return This builder for chaining.
         */
        public Builder setPortRxErrorPackets(long value) {
          
          portRxErrorPackets_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太接口接收的所有错误帧数，包括超短帧、超长帧、CRC错误帧、对齐错误帧
         * </pre>
         *
         * <code>uint64 port_rx_error_packets = 20;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortRxErrorPackets() {
          
          portRxErrorPackets_ = 0L;
          onChanged();
          return this;
        }

        private long portTxRate_ ;
        /**
         * <pre>
         *以太端口下行平均速率，单位kbps
         * </pre>
         *
         * <code>uint64 port_tx_rate = 21;</code>
         * @return The portTxRate.
         */
        public long getPortTxRate() {
          return portTxRate_;
        }
        /**
         * <pre>
         *以太端口下行平均速率，单位kbps
         * </pre>
         *
         * <code>uint64 port_tx_rate = 21;</code>
         * @param value The portTxRate to set.
         * @return This builder for chaining.
         */
        public Builder setPortTxRate(long value) {
          
          portTxRate_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太端口下行平均速率，单位kbps
         * </pre>
         *
         * <code>uint64 port_tx_rate = 21;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortTxRate() {
          
          portTxRate_ = 0L;
          onChanged();
          return this;
        }

        private long portRxRate_ ;
        /**
         * <pre>
         *以太端口上行平均速率，单位kbps
         * </pre>
         *
         * <code>uint64 port_rx_rate = 22;</code>
         * @return The portRxRate.
         */
        public long getPortRxRate() {
          return portRxRate_;
        }
        /**
         * <pre>
         *以太端口上行平均速率，单位kbps
         * </pre>
         *
         * <code>uint64 port_rx_rate = 22;</code>
         * @param value The portRxRate to set.
         * @return This builder for chaining.
         */
        public Builder setPortRxRate(long value) {
          
          portRxRate_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太端口上行平均速率，单位kbps
         * </pre>
         *
         * <code>uint64 port_rx_rate = 22;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortRxRate() {
          
          portRxRate_ = 0L;
          onChanged();
          return this;
        }

        private long portTxPeakRate_ ;
        /**
         * <pre>
         *以太端口下行秒级峰值速率，单位kbps
         * </pre>
         *
         * <code>uint64 port_tx_peak_rate = 23;</code>
         * @return The portTxPeakRate.
         */
        public long getPortTxPeakRate() {
          return portTxPeakRate_;
        }
        /**
         * <pre>
         *以太端口下行秒级峰值速率，单位kbps
         * </pre>
         *
         * <code>uint64 port_tx_peak_rate = 23;</code>
         * @param value The portTxPeakRate to set.
         * @return This builder for chaining.
         */
        public Builder setPortTxPeakRate(long value) {
          
          portTxPeakRate_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太端口下行秒级峰值速率，单位kbps
         * </pre>
         *
         * <code>uint64 port_tx_peak_rate = 23;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortTxPeakRate() {
          
          portTxPeakRate_ = 0L;
          onChanged();
          return this;
        }

        private long portRxPeakRate_ ;
        /**
         * <pre>
         *以太端口上行秒级峰值速率，单位kbps
         * </pre>
         *
         * <code>uint64 port_rx_peak_rate = 24;</code>
         * @return The portRxPeakRate.
         */
        public long getPortRxPeakRate() {
          return portRxPeakRate_;
        }
        /**
         * <pre>
         *以太端口上行秒级峰值速率，单位kbps
         * </pre>
         *
         * <code>uint64 port_rx_peak_rate = 24;</code>
         * @param value The portRxPeakRate to set.
         * @return This builder for chaining.
         */
        public Builder setPortRxPeakRate(long value) {
          
          portRxPeakRate_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         *以太端口上行秒级峰值速率，单位kbps
         * </pre>
         *
         * <code>uint64 port_rx_peak_rate = 24;</code>
         * @return This builder for chaining.
         */
        public Builder clearPortRxPeakRate() {
          
          portRxPeakRate_ = 0L;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord)
      }

      // @@protoc_insertion_point(class_scope:an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord)
      private static final com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord();
      }

      public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<EthernetPortKpiRecord>
          PARSER = new com.google.protobuf.AbstractParser<EthernetPortKpiRecord>() {
        @java.lang.Override
        public EthernetPortKpiRecord parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new EthernetPortKpiRecord(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<EthernetPortKpiRecord> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<EthernetPortKpiRecord> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int ETHERNET_PORT_KPI_RECORD_FIELD_NUMBER = 1;
    private java.util.List<com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord> ethernetPortKpiRecord_;
    /**
     * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
     */
    public java.util.List<com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord> getEthernetPortKpiRecordList() {
      return ethernetPortKpiRecord_;
    }
    /**
     * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
     */
    public java.util.List<? extends com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecordOrBuilder> 
        getEthernetPortKpiRecordOrBuilderList() {
      return ethernetPortKpiRecord_;
    }
    /**
     * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
     */
    public int getEthernetPortKpiRecordCount() {
      return ethernetPortKpiRecord_.size();
    }
    /**
     * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
     */
    public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord getEthernetPortKpiRecord(int index) {
      return ethernetPortKpiRecord_.get(index);
    }
    /**
     * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
     */
    public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecordOrBuilder getEthernetPortKpiRecordOrBuilder(
        int index) {
      return ethernetPortKpiRecord_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < ethernetPortKpiRecord_.size(); i++) {
        output.writeMessage(1, ethernetPortKpiRecord_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < ethernetPortKpiRecord_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, ethernetPortKpiRecord_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.telemetry.AnEthernetKpi.EthernetPortKpiRecords)) {
        return super.equals(obj);
      }
      com.telemetry.AnEthernetKpi.EthernetPortKpiRecords other = (com.telemetry.AnEthernetKpi.EthernetPortKpiRecords) obj;

      if (!getEthernetPortKpiRecordList()
          .equals(other.getEthernetPortKpiRecordList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getEthernetPortKpiRecordCount() > 0) {
        hash = (37 * hash) + ETHERNET_PORT_KPI_RECORD_FIELD_NUMBER;
        hash = (53 * hash) + getEthernetPortKpiRecordList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.telemetry.AnEthernetKpi.EthernetPortKpiRecords prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code an_ethernet_kpi.EthernetPortKpiRecords}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:an_ethernet_kpi.EthernetPortKpiRecords)
        com.telemetry.AnEthernetKpi.EthernetPortKpiRecordsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.telemetry.AnEthernetKpi.internal_static_an_ethernet_kpi_EthernetPortKpiRecords_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.telemetry.AnEthernetKpi.internal_static_an_ethernet_kpi_EthernetPortKpiRecords_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.class, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.Builder.class);
      }

      // Construct using com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getEthernetPortKpiRecordFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (ethernetPortKpiRecordBuilder_ == null) {
          ethernetPortKpiRecord_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ethernetPortKpiRecordBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.telemetry.AnEthernetKpi.internal_static_an_ethernet_kpi_EthernetPortKpiRecords_descriptor;
      }

      @java.lang.Override
      public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords getDefaultInstanceForType() {
        return com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.getDefaultInstance();
      }

      @java.lang.Override
      public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords build() {
        com.telemetry.AnEthernetKpi.EthernetPortKpiRecords result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords buildPartial() {
        com.telemetry.AnEthernetKpi.EthernetPortKpiRecords result = new com.telemetry.AnEthernetKpi.EthernetPortKpiRecords(this);
        int from_bitField0_ = bitField0_;
        if (ethernetPortKpiRecordBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            ethernetPortKpiRecord_ = java.util.Collections.unmodifiableList(ethernetPortKpiRecord_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.ethernetPortKpiRecord_ = ethernetPortKpiRecord_;
        } else {
          result.ethernetPortKpiRecord_ = ethernetPortKpiRecordBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.telemetry.AnEthernetKpi.EthernetPortKpiRecords) {
          return mergeFrom((com.telemetry.AnEthernetKpi.EthernetPortKpiRecords)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.telemetry.AnEthernetKpi.EthernetPortKpiRecords other) {
        if (other == com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.getDefaultInstance()) return this;
        if (ethernetPortKpiRecordBuilder_ == null) {
          if (!other.ethernetPortKpiRecord_.isEmpty()) {
            if (ethernetPortKpiRecord_.isEmpty()) {
              ethernetPortKpiRecord_ = other.ethernetPortKpiRecord_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureEthernetPortKpiRecordIsMutable();
              ethernetPortKpiRecord_.addAll(other.ethernetPortKpiRecord_);
            }
            onChanged();
          }
        } else {
          if (!other.ethernetPortKpiRecord_.isEmpty()) {
            if (ethernetPortKpiRecordBuilder_.isEmpty()) {
              ethernetPortKpiRecordBuilder_.dispose();
              ethernetPortKpiRecordBuilder_ = null;
              ethernetPortKpiRecord_ = other.ethernetPortKpiRecord_;
              bitField0_ = (bitField0_ & ~0x00000001);
              ethernetPortKpiRecordBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getEthernetPortKpiRecordFieldBuilder() : null;
            } else {
              ethernetPortKpiRecordBuilder_.addAllMessages(other.ethernetPortKpiRecord_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.telemetry.AnEthernetKpi.EthernetPortKpiRecords parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.telemetry.AnEthernetKpi.EthernetPortKpiRecords) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord> ethernetPortKpiRecord_ =
        java.util.Collections.emptyList();
      private void ensureEthernetPortKpiRecordIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          ethernetPortKpiRecord_ = new java.util.ArrayList<com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord>(ethernetPortKpiRecord_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.Builder, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecordOrBuilder> ethernetPortKpiRecordBuilder_;

      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public java.util.List<com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord> getEthernetPortKpiRecordList() {
        if (ethernetPortKpiRecordBuilder_ == null) {
          return java.util.Collections.unmodifiableList(ethernetPortKpiRecord_);
        } else {
          return ethernetPortKpiRecordBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public int getEthernetPortKpiRecordCount() {
        if (ethernetPortKpiRecordBuilder_ == null) {
          return ethernetPortKpiRecord_.size();
        } else {
          return ethernetPortKpiRecordBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord getEthernetPortKpiRecord(int index) {
        if (ethernetPortKpiRecordBuilder_ == null) {
          return ethernetPortKpiRecord_.get(index);
        } else {
          return ethernetPortKpiRecordBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public Builder setEthernetPortKpiRecord(
          int index, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord value) {
        if (ethernetPortKpiRecordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEthernetPortKpiRecordIsMutable();
          ethernetPortKpiRecord_.set(index, value);
          onChanged();
        } else {
          ethernetPortKpiRecordBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public Builder setEthernetPortKpiRecord(
          int index, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.Builder builderForValue) {
        if (ethernetPortKpiRecordBuilder_ == null) {
          ensureEthernetPortKpiRecordIsMutable();
          ethernetPortKpiRecord_.set(index, builderForValue.build());
          onChanged();
        } else {
          ethernetPortKpiRecordBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public Builder addEthernetPortKpiRecord(com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord value) {
        if (ethernetPortKpiRecordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEthernetPortKpiRecordIsMutable();
          ethernetPortKpiRecord_.add(value);
          onChanged();
        } else {
          ethernetPortKpiRecordBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public Builder addEthernetPortKpiRecord(
          int index, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord value) {
        if (ethernetPortKpiRecordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEthernetPortKpiRecordIsMutable();
          ethernetPortKpiRecord_.add(index, value);
          onChanged();
        } else {
          ethernetPortKpiRecordBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public Builder addEthernetPortKpiRecord(
          com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.Builder builderForValue) {
        if (ethernetPortKpiRecordBuilder_ == null) {
          ensureEthernetPortKpiRecordIsMutable();
          ethernetPortKpiRecord_.add(builderForValue.build());
          onChanged();
        } else {
          ethernetPortKpiRecordBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public Builder addEthernetPortKpiRecord(
          int index, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.Builder builderForValue) {
        if (ethernetPortKpiRecordBuilder_ == null) {
          ensureEthernetPortKpiRecordIsMutable();
          ethernetPortKpiRecord_.add(index, builderForValue.build());
          onChanged();
        } else {
          ethernetPortKpiRecordBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public Builder addAllEthernetPortKpiRecord(
          java.lang.Iterable<? extends com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord> values) {
        if (ethernetPortKpiRecordBuilder_ == null) {
          ensureEthernetPortKpiRecordIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, ethernetPortKpiRecord_);
          onChanged();
        } else {
          ethernetPortKpiRecordBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public Builder clearEthernetPortKpiRecord() {
        if (ethernetPortKpiRecordBuilder_ == null) {
          ethernetPortKpiRecord_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          ethernetPortKpiRecordBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public Builder removeEthernetPortKpiRecord(int index) {
        if (ethernetPortKpiRecordBuilder_ == null) {
          ensureEthernetPortKpiRecordIsMutable();
          ethernetPortKpiRecord_.remove(index);
          onChanged();
        } else {
          ethernetPortKpiRecordBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.Builder getEthernetPortKpiRecordBuilder(
          int index) {
        return getEthernetPortKpiRecordFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecordOrBuilder getEthernetPortKpiRecordOrBuilder(
          int index) {
        if (ethernetPortKpiRecordBuilder_ == null) {
          return ethernetPortKpiRecord_.get(index);  } else {
          return ethernetPortKpiRecordBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public java.util.List<? extends com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecordOrBuilder> 
           getEthernetPortKpiRecordOrBuilderList() {
        if (ethernetPortKpiRecordBuilder_ != null) {
          return ethernetPortKpiRecordBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(ethernetPortKpiRecord_);
        }
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.Builder addEthernetPortKpiRecordBuilder() {
        return getEthernetPortKpiRecordFieldBuilder().addBuilder(
            com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.getDefaultInstance());
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.Builder addEthernetPortKpiRecordBuilder(
          int index) {
        return getEthernetPortKpiRecordFieldBuilder().addBuilder(
            index, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.getDefaultInstance());
      }
      /**
       * <code>repeated .an_ethernet_kpi.EthernetPortKpiRecords.EthernetPortKpiRecord ethernet_port_kpi_record = 1;</code>
       */
      public java.util.List<com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.Builder> 
           getEthernetPortKpiRecordBuilderList() {
        return getEthernetPortKpiRecordFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.Builder, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecordOrBuilder> 
          getEthernetPortKpiRecordFieldBuilder() {
        if (ethernetPortKpiRecordBuilder_ == null) {
          ethernetPortKpiRecordBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecord.Builder, com.telemetry.AnEthernetKpi.EthernetPortKpiRecords.EthernetPortKpiRecordOrBuilder>(
                  ethernetPortKpiRecord_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          ethernetPortKpiRecord_ = null;
        }
        return ethernetPortKpiRecordBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:an_ethernet_kpi.EthernetPortKpiRecords)
    }

    // @@protoc_insertion_point(class_scope:an_ethernet_kpi.EthernetPortKpiRecords)
    private static final com.telemetry.AnEthernetKpi.EthernetPortKpiRecords DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.telemetry.AnEthernetKpi.EthernetPortKpiRecords();
    }

    public static com.telemetry.AnEthernetKpi.EthernetPortKpiRecords getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EthernetPortKpiRecords>
        PARSER = new com.google.protobuf.AbstractParser<EthernetPortKpiRecords>() {
      @java.lang.Override
      public EthernetPortKpiRecords parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EthernetPortKpiRecords(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EthernetPortKpiRecords> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EthernetPortKpiRecords> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.telemetry.AnEthernetKpi.EthernetPortKpiRecords getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_an_ethernet_kpi_EthernetPortKpiRecords_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_an_ethernet_kpi_EthernetPortKpiRecords_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_an_ethernet_kpi_EthernetPortKpiRecords_EthernetPortKpiRecord_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_an_ethernet_kpi_EthernetPortKpiRecords_EthernetPortKpiRecord_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025an-ethernet-kpi.proto\022\017an_ethernet_kpi" +
      "\"\344\006\n\026EthernetPortKpiRecords\022_\n\030ethernet_" +
      "port_kpi_record\030\001 \003(\0132=.an_ethernet_kpi." +
      "EthernetPortKpiRecords.EthernetPortKpiRe" +
      "cord\032\350\005\n\025EthernetPortKpiRecord\022\014\n\004name\030\001" +
      " \001(\t\022\025\n\rport_tx_bytes\030\002 \001(\004\022\025\n\rport_rx_b" +
      "ytes\030\003 \001(\004\022\027\n\017port_tx_packets\030\004 \001(\004\022\027\n\017p" +
      "ort_rx_packets\030\005 \001(\004\022\037\n\027port_tx_discard_" +
      "packets\030\006 \001(\004\022\037\n\027port_rx_discard_packets" +
      "\030\007 \001(\004\022\'\n\037port_rx_alignment_error_packet" +
      "s\030\010 \001(\004\022!\n\031port_tx_crc_error_packets\030\t \001" +
      "(\004\022!\n\031port_rx_crc_error_packets\030\n \001(\004\022!\n" +
      "\031port_tx_oversized_packets\030\013 \001(\004\022!\n\031port" +
      "_rx_oversized_packets\030\014 \001(\004\022\"\n\032port_tx_u" +
      "ndersized_packets\030\r \001(\004\022\"\n\032port_rx_under" +
      "sized_packets\030\016 \001(\004\022 \n\030port_tx_fragment_" +
      "packets\030\017 \001(\004\022 \n\030port_rx_fragment_packet" +
      "s\030\020 \001(\004\022\036\n\026port_tx_jabber_packets\030\021 \001(\004\022" +
      "\036\n\026port_rx_jabber_packets\030\022 \001(\004\022\035\n\025port_" +
      "tx_error_packets\030\023 \001(\004\022\035\n\025port_rx_error_" +
      "packets\030\024 \001(\004\022\024\n\014port_tx_rate\030\025 \001(\004\022\024\n\014p" +
      "ort_rx_rate\030\026 \001(\004\022\031\n\021port_tx_peak_rate\030\027" +
      " \001(\004\022\031\n\021port_rx_peak_rate\030\030 \001(\004B\017\n\rcom.t" +
      "elemetryb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_an_ethernet_kpi_EthernetPortKpiRecords_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_an_ethernet_kpi_EthernetPortKpiRecords_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_an_ethernet_kpi_EthernetPortKpiRecords_descriptor,
        new java.lang.String[] { "EthernetPortKpiRecord", });
    internal_static_an_ethernet_kpi_EthernetPortKpiRecords_EthernetPortKpiRecord_descriptor =
      internal_static_an_ethernet_kpi_EthernetPortKpiRecords_descriptor.getNestedTypes().get(0);
    internal_static_an_ethernet_kpi_EthernetPortKpiRecords_EthernetPortKpiRecord_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_an_ethernet_kpi_EthernetPortKpiRecords_EthernetPortKpiRecord_descriptor,
        new java.lang.String[] { "Name", "PortTxBytes", "PortRxBytes", "PortTxPackets", "PortRxPackets", "PortTxDiscardPackets", "PortRxDiscardPackets", "PortRxAlignmentErrorPackets", "PortTxCrcErrorPackets", "PortRxCrcErrorPackets", "PortTxOversizedPackets", "PortRxOversizedPackets", "PortTxUndersizedPackets", "PortRxUndersizedPackets", "PortTxFragmentPackets", "PortRxFragmentPackets", "PortTxJabberPackets", "PortRxJabberPackets", "PortTxErrorPackets", "PortRxErrorPackets", "PortTxRate", "PortRxRate", "PortTxPeakRate", "PortRxPeakRate", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
